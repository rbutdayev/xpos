import React, { useState, useEffect } from 'react';
import { Head, router, useForm } from '@inertiajs/react';
import AuthenticatedLayout from '@/Layouts/AuthenticatedLayout';
import PrimaryButton from '@/Components/PrimaryButton';
import SecondaryButton from '@/Components/SecondaryButton';
import DangerButton from '@/Components/DangerButton';
import TextInput from '@/Components/TextInput';
import InputLabel from '@/Components/InputLabel';
import InputError from '@/Components/InputError';
import CustomerSelect from '@/Components/CustomerSelect';
import VehicleSelect from '@/Components/VehicleSelect';
import ProductSelect from '@/Components/ProductSelect';
import { PageProps, Product, Customer, Vehicle, Branch, User, Service } from '@/types';
import { TrashIcon, ShoppingCartIcon, WrenchScrewdriverIcon } from '@heroicons/react/24/outline';

interface POSIndexProps extends PageProps {
    customers: Customer[];
    vehicles: Vehicle[];
    employees: User[];
    services: Service[];
    branches: Branch[];
}

interface CartItem {
    id: string; // Unique ID for cart item
    type: 'product' | 'service' | 'manual';
    product_id?: number;
    service_id_ref?: number;
    product?: Product;
    service?: Service;
    item_name?: string; // For manual entries
    quantity: number;
    base_quantity?: number; // For inventory deduction (packaging support)
    unit_price: number;
    discount_amount: number;
    total: number;
    selling_unit?: string; // The unit customer is buying in
    notes?: string;
}


export default function Index({ 
    auth, 
    customers, 
    vehicles, 
    employees, 
    services, 
    branches 
}: POSIndexProps) {
    // Mode selection
    const [mode, setMode] = useState<'sale' | 'service'>('sale');
    
    // Form data
    const [formData, setFormData] = useState({
        customer_id: '',
        vehicle_id: '',
        branch_id: branches.length === 1 ? branches[0].id.toString() : '',
        employee_id: '', // Only for service mode
        description: '', // Only for service mode
        labor_cost: 0, // Only for service mode
        service_date: new Date().toISOString().split('T')[0], // Only for service mode
        service_time: new Date().toLocaleTimeString('az-AZ', {hour: '2-digit', minute:'2-digit'}), // Only for service mode
        status: 'pending', // Only for service mode
        tax_amount: 0, // Only for sale mode
        discount_amount: 0,
        notes: '',
        vehicle_mileage: undefined as number | undefined, // Only for service mode
        // Payment fields (unified for both modes)
        payment_status: 'paid', // paid, credit, partial
        paid_amount: 0,
        credit_amount: 0,
        credit_due_date: '',
        credit_description: '',
    });
    
    const [cart, setCart] = useState<CartItem[]>([]);
    const [errors, setErrors] = useState<Record<string, string>>({});
    const [processing, setProcessing] = useState(false);

    // Product/Service search
    const [itemSearch, setItemSearch] = useState('');
    const [searchResults, setSearchResults] = useState<(Product | Service)[]>([]);
    const [isSearching, setIsSearching] = useState(false);


    // Customer vehicles filter
    const [customerVehicles, setCustomerVehicles] = useState<Vehicle[]>([]);

    // Check if user can edit date/time (service mode only)
    const canEditDateTime = auth?.user?.role && ['account_owner', 'admin', 'branch_manager'].includes(auth.user.role);

    // Calculate totals
    const subtotal = cart.reduce((sum, item) => sum + item.total, 0);
    const taxAmount = mode === 'sale' ? formData.tax_amount : 0;
    const discountAmount = formData.discount_amount;
    const laborCost = mode === 'service' ? formData.labor_cost : 0;
    const grandTotal = subtotal + taxAmount + laborCost - discountAmount;

    // Update payment amounts when payment status or total changes
    useEffect(() => {
        if (formData.payment_status === 'paid') {
            setFormData(prev => ({ 
                ...prev, 
                paid_amount: grandTotal,
                credit_amount: 0 
            }));
        } else if (formData.payment_status === 'credit') {
            setFormData(prev => ({ 
                ...prev, 
                paid_amount: 0,
                credit_amount: grandTotal 
            }));
        }
        // For partial payments, keep user input and calculate the other amount
    }, [formData.payment_status, grandTotal]);

    // Update customer vehicles when customer changes
    useEffect(() => {
        if (formData.customer_id && vehicles) {
            const filteredVehicles = vehicles.filter(vehicle => 
                vehicle.customer_id?.toString() === formData.customer_id
            );
            setCustomerVehicles(filteredVehicles);
        } else {
            setCustomerVehicles([]);
            setFormData(prev => ({ ...prev, vehicle_id: '' }));
        }
    }, [formData.customer_id]);

    // Clear mode-specific fields when switching modes
    useEffect(() => {
        if (mode === 'sale') {
            setFormData(prev => ({
                ...prev,
                vehicle_id: '',
                employee_id: '',
                description: '',
                labor_cost: 0,
                service_date: new Date().toISOString().split('T')[0],
                service_time: new Date().toLocaleTimeString('az-AZ', {hour: '2-digit', minute:'2-digit'}),
                status: 'pending',
                vehicle_mileage: undefined as number | undefined,
                payment_status: 'paid',
                paid_amount: 0,
                credit_amount: 0,
            }));
        } else {
            setFormData(prev => ({
                ...prev,
                tax_amount: 0,
                payment_status: 'paid',
                paid_amount: 0,
                credit_amount: 0,
            }));
        }
        setCart([]);
    }, [mode]);

    // Search for items (products or services)
    useEffect(() => {
        if (!itemSearch.trim()) {
            setSearchResults([]);
            return;
        }

        if (itemSearch.length < 2) {
            return;
        }

        setIsSearching(true);
        
        const timeoutId = setTimeout(() => {
            const searchUrl = mode === 'sale' ? `/products/search?q=${encodeURIComponent(itemSearch)}` :
                             `/products/search?q=${encodeURIComponent(itemSearch)}&include_services=true`;
            
            fetch(searchUrl)
                .then(response => response.json())
                .then(data => {
                    let results = data;
                    
                    // For service mode, also include services
                    if (mode === 'service') {
                        const filteredServices = services.filter(service => 
                            service.name.toLowerCase().includes(itemSearch.toLowerCase()) ||
                            (service.code && service.code.toLowerCase().includes(itemSearch.toLowerCase()))
                        );
                        results = [...data, ...filteredServices.map(service => ({ ...service, type: 'service' }))];
                    }
                    
                    setSearchResults(results);
                    setIsSearching(false);
                })
                .catch(error => {
                    console.error('Search error:', error);
                    setSearchResults([]);
                    setIsSearching(false);
                });
        }, 300);

        return () => clearTimeout(timeoutId);
    }, [itemSearch, mode, services]);

    // Add item to cart
    const addToCart = (item: Product | Service) => {
        const isService = (item as any).type === 'service' || 'price' in item;
        const price = Number((item as Product).sale_price || (item as Service).price || 0);
        
        const cartItem: CartItem = {
            id: `${isService ? 'service' : 'product'}-${item.id}-${Date.now()}`,
            type: isService ? 'service' : 'product',
            quantity: 1,
            unit_price: price,
            discount_amount: 0,
            total: price,
            selling_unit: (item as Product).unit || 'ədəd',
        };

        if (isService) {
            cartItem.service_id_ref = item.id;
            cartItem.service = item as Service;
        } else {
            cartItem.product_id = item.id;
            cartItem.product = item as Product;
            cartItem.base_quantity = 1; // Will be calculated based on packaging
        }

        setCart(prev => [...prev, cartItem]);
        setItemSearch('');
        setSearchResults([]);
    };

    // Update cart item
    const updateCartItem = (id: string, field: keyof CartItem, value: any) => {
        setCart(prev => prev.map(item => {
            if (item.id === id) {
                const updated = { ...item, [field]: value };
                // Recalculate total
                updated.total = (updated.quantity * updated.unit_price) - updated.discount_amount;
                return updated;
            }
            return item;
        }));
    };

    // Remove item from cart
    const removeFromCart = (id: string) => {
        setCart(prev => prev.filter(item => item.id !== id));
    };

    // Submit form
    const handleSubmit = (e: React.FormEvent) => {
        e.preventDefault();
        console.log('Form submitted!', { mode, cart, formData });
        setProcessing(true);
        setErrors({});

        // Basic validation
        const newErrors: Record<string, string> = {};
        
        if (!formData.branch_id) {
            newErrors.branch_id = 'Filial seçmək məcburidir';
        }
        
        if (cart.length === 0) {
            newErrors.items = 'Ən azı bir məhsul və ya xidmət əlavə edilməlidir';
        }
        
        if (mode === 'service') {
            if (!formData.customer_id) {
                newErrors.customer_id = 'Servis üçün müştəri seçmək məcburidir';
            }
            if (!formData.description.trim()) {
                newErrors.description = 'Servis açıqlaması məcburidir';
            }
        }

        if (Object.keys(newErrors).length > 0) {
            setErrors(newErrors);
            setProcessing(false);
            return;
        }

        const submitData: any = {
            ...formData,
            items: cart.map(item => ({
                item_type: item.type === 'service' ? 'service' : 'product',
                product_id: item.product_id,
                service_id_ref: item.service_id_ref,
                item_name: item.item_name,
                quantity: item.quantity,
                base_quantity: item.base_quantity,
                unit_price: item.unit_price,
                discount_amount: item.discount_amount,
                notes: item.notes,
            })),
            total: grandTotal,
        };

        console.log('Submit data prepared:', submitData);

        if (mode === 'sale') {
            submitData.service_items = undefined;
            
            router.post('/pos/sale', submitData, {
                onSuccess: () => {
                    // Reset form
                    setCart([]);
                    setFormData(prev => ({ 
                        ...prev, 
                        customer_id: '', 
                        vehicle_id: '', 
                        notes: '', 
                        discount_amount: 0, 
                        tax_amount: 0,
                        payment_status: 'paid',
                        paid_amount: 0,
                        credit_amount: 0,
                        credit_due_date: ''
                    }));
                },
                onError: (errors) => {
                    console.error('Sale submission errors:', errors);
                    setErrors(errors);
                    setProcessing(false);
                },
                onFinish: () => setProcessing(false),
            });
        } else {
            submitData.service_items = submitData.items;
            submitData.items = undefined;
            
            router.post('/pos/service', submitData, {
                onSuccess: () => {
                    // Reset form
                    setCart([]);
                    setFormData(prev => ({ 
                        ...prev, 
                        customer_id: '', 
                        vehicle_id: '', 
                        description: '', 
                        notes: '', 
                        discount_amount: 0, 
                        labor_cost: 0,
                        vehicle_mileage: undefined,
                        payment_status: 'paid',
                        paid_amount: 0,
                        credit_amount: 0,
                        credit_due_date: ''
                    }));
                },
                onError: (errors) => {
                    console.error('Service submission errors:', errors);
                    setErrors(errors);
                    setProcessing(false);
                },
                onFinish: () => setProcessing(false),
            });
        }
    };

    return (
        <AuthenticatedLayout
            header={<h2 className="font-semibold text-xl text-gray-800 leading-tight">POS Satış</h2>}
        >
            <Head title="POS Satış" />

            <div className="py-6">
                <div className="max-w-7xl mx-auto sm:px-6 lg:px-8">
                    {/* Mode Selection */}
                    <div className="bg-white shadow-sm sm:rounded-lg mb-6">
                        <div className="p-6 border-b border-gray-200">
                            <div className="flex items-center space-x-6">
                                <label className="flex items-center">
                                    <input
                                        type="radio"
                                        value="sale"
                                        checked={mode === 'sale'}
                                        onChange={(e) => setMode(e.target.value as 'sale' | 'service')}
                                        className="mr-2"
                                    />
                                    <ShoppingCartIcon className="h-5 w-5 mr-2 text-blue-600" />
                                    <span className="text-lg font-medium">Satış</span>
                                </label>
                                <label className="flex items-center">
                                    <input
                                        type="radio"
                                        value="service"
                                        checked={mode === 'service'}
                                        onChange={(e) => setMode(e.target.value as 'sale' | 'service')}
                                        className="mr-2"
                                    />
                                    <WrenchScrewdriverIcon className="h-5 w-5 mr-2 text-green-600" />
                                    <span className="text-lg font-medium">Servis</span>
                                </label>
                            </div>
                        </div>
                    </div>

                    <form onSubmit={handleSubmit}>
                        {/* Display general errors */}
                        {errors.items && (
                            <div className="mb-4 p-4 bg-red-50 border border-red-200 rounded-md">
                                <p className="text-red-600 text-sm">{errors.items}</p>
                            </div>
                        )}

                        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                            {/* Left Column - Customer & Details */}
                            <div className="lg:col-span-2">
                                {/* Customer Selection */}
                                <div className="bg-white shadow-sm sm:rounded-lg mb-6">
                                    <div className="p-6">
                                        <h3 className="text-lg font-medium text-gray-900 mb-4">Müştəri Məlumatları</h3>
                                        
                                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                            <div>
                                                <InputLabel htmlFor="customer_id" value="Müştəri" />
                                                <CustomerSelect
                                                    customers={customers}
                                                    value={formData.customer_id}
                                                    onChange={(value) => setFormData(prev => ({ ...prev, customer_id: value }))}
                                                    className="mt-1 block w-full"
                                                />
                                                <InputError message={errors.customer_id} className="mt-2" />
                                            </div>

                                            <div>
                                                <InputLabel htmlFor="branch_id" value="Filial *" />
                                                <select
                                                    id="branch_id"
                                                    value={formData.branch_id}
                                                    onChange={(e) => setFormData(prev => ({ ...prev, branch_id: e.target.value }))}
                                                    className="mt-1 block w-full border-gray-300 rounded-md shadow-sm"
                                                    required
                                                >
                                                    <option value="">Filial seçin</option>
                                                    {branches.map((branch) => (
                                                        <option key={branch.id} value={branch.id}>
                                                            {branch.name}
                                                        </option>
                                                    ))}
                                                </select>
                                                <InputError message={errors.branch_id} className="mt-2" />
                                            </div>
                                        </div>

                                        {mode === 'service' && (
                                            <div className="mt-4">
                                                <InputLabel htmlFor="vehicle_id" value="Nəqliyyat Vasitəsi" />
                                                <VehicleSelect
                                                    vehicles={customerVehicles}
                                                    value={formData.vehicle_id}
                                                    onChange={(value) => setFormData(prev => ({ ...prev, vehicle_id: value }))}
                                                    className="mt-1 block w-full"
                                                    placeholder="Nəqliyyat vasitəsi seçin (ixtiyari)"
                                                />
                                                <InputError message={errors.vehicle_id} className="mt-2" />
                                            </div>
                                        )}

                                        {mode === 'service' && formData.vehicle_id && (
                                            <div className="mt-4">
                                                <InputLabel htmlFor="vehicle_mileage" value="Kilometraj" />
                                                <TextInput
                                                    id="vehicle_mileage"
                                                    type="number"
                                                    value={formData.vehicle_mileage || ''}
                                                    onChange={(e) => setFormData(prev => ({ 
                                                        ...prev, 
                                                        vehicle_mileage: e.target.value ? parseInt(e.target.value) : undefined 
                                                    }))}
                                                    className="mt-1 block w-full"
                                                    placeholder="Cari kilometraj"
                                                />
                                                <InputError message={errors.vehicle_mileage} className="mt-2" />
                                            </div>
                                        )}
                                    </div>
                                </div>

                                {/* Service Details (Service mode only) */}
                                {mode === 'service' && (
                                    <div className="bg-white shadow-sm sm:rounded-lg mb-6">
                                        <div className="p-6">
                                            <h3 className="text-lg font-medium text-gray-900 mb-4">Servis Təfərrüatları</h3>
                                            
                                            <div className="space-y-4">
                                                <div>
                                                    <InputLabel htmlFor="description" value="Açıqlama *" />
                                                    <textarea
                                                        id="description"
                                                        value={formData.description}
                                                        onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
                                                        className="mt-1 block w-full border-gray-300 rounded-md shadow-sm"
                                                        rows={3}
                                                        placeholder="Görüləcək işin təfərrüatları"
                                                        required
                                                    />
                                                    <InputError message={errors.description} className="mt-2" />
                                                </div>

                                                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                                    <div>
                                                        <InputLabel htmlFor="labor_cost" value="İşçilik (AZN)" />
                                                        <TextInput
                                                            id="labor_cost"
                                                            type="number"
                                                            step="0.01"
                                                            value={formData.labor_cost}
                                                            onChange={(e) => setFormData(prev => ({ ...prev, labor_cost: parseFloat(e.target.value) || 0 }))}
                                                            className="mt-1 block w-full"
                                                        />
                                                        <InputError message={errors.labor_cost} className="mt-2" />
                                                    </div>

                                                    <div>
                                                        <InputLabel htmlFor="employee_id" value="Məsul Şəxs" />
                                                        <select
                                                            id="employee_id"
                                                            value={formData.employee_id}
                                                            onChange={(e) => setFormData(prev => ({ ...prev, employee_id: e.target.value }))}
                                                            className="mt-1 block w-full border-gray-300 rounded-md shadow-sm"
                                                        >
                                                            <option value="">Məsul şəxs seçin</option>
                                                            {employees.map((employee) => (
                                                                <option key={employee.id} value={employee.id}>
                                                                    {employee.name} {employee.position && `(${employee.position})`}
                                                                </option>
                                                            ))}
                                                        </select>
                                                        <InputError message={errors.employee_id} className="mt-2" />
                                                    </div>
                                                </div>

                                                 {canEditDateTime && (
                                                     <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                                                         <div>
                                                             <InputLabel htmlFor="service_date" value="Servis Tarixi" />
                                                             <TextInput
                                                                 id="service_date"
                                                                 type="date"
                                                                 value={formData.service_date}
                                                                 onChange={(e) => setFormData(prev => ({ ...prev, service_date: e.target.value }))}
                                                                 className="mt-1 block w-full"
                                                             />
                                                             <InputError message={errors.service_date} className="mt-2" />
                                                         </div>

                                                         <div>
                                                             <InputLabel htmlFor="service_time" value="Servis Vaxtı" />
                                                             <TextInput
                                                                 id="service_time"
                                                                 type="time"
                                                                 value={formData.service_time}
                                                                 onChange={(e) => setFormData(prev => ({ ...prev, service_time: e.target.value }))}
                                                                 className="mt-1 block w-full"
                                                             />
                                                             <InputError message={errors.service_time} className="mt-2" />
                                                         </div>

                                                         <div>
                                                             <InputLabel htmlFor="status" value="Status" />
                                                             <select
                                                                 id="status"
                                                                 value={formData.status}
                                                                 onChange={(e) => setFormData(prev => ({ ...prev, status: e.target.value }))}
                                                                 className="mt-1 block w-full border-gray-300 rounded-md shadow-sm"
                                                             >
                                                                 <option value="pending">Gözləyir</option>
                                                                 <option value="in_progress">Davam edir</option>
                                                                 <option value="completed">Tamamlandı</option>
                                                                 <option value="cancelled">Ləğv edildi</option>
                                                             </select>
                                                             <InputError message={errors.status} className="mt-2" />
                                                         </div>
                                                     </div>
                                                 )}

                                                 {!canEditDateTime && (
                                                     <div>
                                                         <InputLabel htmlFor="status" value="Status" />
                                                         <select
                                                             id="status"
                                                             value={formData.status}
                                                             onChange={(e) => setFormData(prev => ({ ...prev, status: e.target.value }))}
                                                             className="mt-1 block w-full border-gray-300 rounded-md shadow-sm"
                                                         >
                                                             <option value="pending">Gözləyir</option>
                                                             <option value="in_progress">Davam edir</option>
                                                             <option value="completed">Tamamlandı</option>
                                                             <option value="cancelled">Ləğv edildi</option>
                                                         </select>
                                                         <InputError message={errors.status} className="mt-2" />
                                                     </div>
                                                 )}
                                            </div>
                                        </div>
                                    </div>
                                )}

                                {/* Items Section */}
                                <div className="bg-white shadow-sm sm:rounded-lg mb-6">
                                    <div className="p-6">
                                        <h3 className="text-lg font-medium text-gray-900 mb-4">
                                            {mode === 'sale' ? 'Məhsullar' : 'Hissələr və Xidmətlər'}
                                        </h3>
                                        
                                        {/* Item Search */}
                                        <div className="mb-4">
                                            <div className="relative">
                                                <TextInput
                                                    type="text"
                                                    value={itemSearch}
                                                    onChange={(e) => setItemSearch(e.target.value)}
                                                    placeholder={mode === 'sale' ? 'Məhsul axtarın...' : 'Hissə və ya xidmət axtarın...'}
                                                    className="w-full"
                                                />
                                                
                                                {/* Search Results */}
                                                {searchResults.length > 0 && (
                                                    <div className="absolute z-50 w-full mt-1 bg-white border border-gray-300 rounded-md shadow-lg max-h-60 overflow-auto">
                                                        {searchResults.map((item) => (
                                                            <div
                                                                key={`${(item as any).type || 'product'}-${item.id}`}
                                                                onClick={() => addToCart(item)}
                                                                className="p-3 hover:bg-gray-50 cursor-pointer border-b border-gray-100"
                                                            >
                                                                <div className="flex justify-between items-center">
                                                                    <div>
                                                                        <span className="font-medium">{item.name}</span>
                                                                        {(item as Product).sku && (
                                                                            <span className="ml-2 text-sm text-gray-500">({(item as Product).sku})</span>
                                                                        )}
                                                                        {(item as any).type === 'service' && (
                                                                            <span className="ml-2 px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full">
                                                                                Xidmət
                                                                            </span>
                                                                        )}
                                                                    </div>
                                                                     <div className="text-right">
                                                                         <div className="font-medium">
                                                                             {Number((item as Product).sale_price || (item as Service).price || 0).toFixed(2)} AZN
                                                                         </div>
                                                                         {(item as Product).total_stock !== undefined && (
                                                                             <div className="text-sm text-gray-500">
                                                                                 Stok: {(item as Product).total_stock}
                                                                             </div>
                                                                         )}
                                                                         {(item as any).type === 'service' && (item as Service).code && (
                                                                             <div className="text-sm text-gray-500">
                                                                                 Kod: {(item as Service).code}
                                                                             </div>
                                                                         )}
                                                                     </div>
                                                                </div>
                                                            </div>
                                                        ))}
                                                    </div>
                                                )}
                                            </div>
                                        </div>

                                         {/* Cart Items */}
                                         {cart.length > 0 && (
                                             <div className="space-y-2">
                                                 {cart.map((item) => (
                                                     <div key={item.id} className="bg-gray-50 rounded-lg p-3">
                                                         <div className="flex items-center space-x-2">
                                                             <div className="flex-1">
                                                                 <div className="font-medium">
                                                                     {item.product?.name || item.service?.name || item.item_name}
                                                                     {item.type === 'service' && (
                                                                         <span className="ml-2 px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full">
                                                                             Xidmət
                                                                         </span>
                                                                     )}
                                                                 </div>
                                                                 {item.product?.sku && (
                                                                     <div className="text-sm text-gray-500">SKU: {item.product.sku}</div>
                                                                 )}
                                                                 {item.service?.code && (
                                                                     <div className="text-sm text-gray-500">Kod: {item.service.code}</div>
                                                                 )}
                                                                 {item.selling_unit && (
                                                                     <div className="text-sm text-gray-500">Vahid: {item.selling_unit}</div>
                                                                 )}
                                                             </div>
                                                            
                                                             <div className="flex items-center space-x-2">
                                                                 <TextInput
                                                                     type="number"
                                                                     step="0.01"
                                                                     value={item.quantity}
                                                                     onChange={(e) => updateCartItem(item.id, 'quantity', parseFloat(e.target.value) || 0)}
                                                                     className="w-20"
                                                                     min="0"
                                                                     placeholder="Miqdar"
                                                                 />
                                                                 
                                                                 <span className="text-sm text-gray-500">×</span>
                                                                 
                                                                 <TextInput
                                                                     type="number"
                                                                     step="0.01"
                                                                     value={item.unit_price}
                                                                     onChange={(e) => updateCartItem(item.id, 'unit_price', parseFloat(e.target.value) || 0)}
                                                                     className="w-24"
                                                                     min="0"
                                                                     placeholder="Qiymət"
                                                                 />
                                                                 
                                                                 <span className="text-sm text-gray-500">=</span>
                                                                 
                                                                 <div className="w-20 text-right font-medium">
                                                                     {item.total.toFixed(2)} AZN
                                                                 </div>
                                                                 
                                                                 <DangerButton
                                                                     type="button"
                                                                     onClick={() => removeFromCart(item.id)}
                                                                     className="p-1"
                                                                 >
                                                                     <TrashIcon className="h-4 w-4" />
                                                                 </DangerButton>
                                                             </div>
                                                         </div>
                                                         
                                                         {/* Notes field for each item */}
                                                         <div className="mt-2">
                                                             <TextInput
                                                                 type="text"
                                                                 value={item.notes || ''}
                                                                 onChange={(e) => updateCartItem(item.id, 'notes', e.target.value)}
                                                                 className="w-full text-sm"
                                                                 placeholder="Qeydlər (ixtiyari)"
                                                             />
                                                         </div>
                                                     </div>
                                                 ))}
                                             </div>
                                         )}
                                                             </div>
                                                             {item.product?.sku && (
                                                                 <div className="text-sm text-gray-500">SKU: {item.product.sku}</div>
                                                             )}
                                                             {item.service?.code && (
                                                                 <div className="text-sm text-gray-500">Kod: {item.service.code}</div>
                                                             )}
                                                             {item.selling_unit && (
                                                                 <div className="text-sm text-gray-500">Vahid: {item.selling_unit}</div>
                                                             )}
                                                         </div>
                                                        
                                                         <div className="flex items-center space-x-2">
                                                             <TextInput
                                                                 type="number"
                                                                 step="0.01"
                                                                 value={item.quantity}
                                                                 onChange={(e) => updateCartItem(item.id, 'quantity', parseFloat(e.target.value) || 0)}
                                                                 className="w-20"
                                                                 min="0"
                                                                 placeholder="Miqdar"
                                                             />
                                                             
                                                             <span className="text-sm text-gray-500">×</span>
                                                             
                                                             <TextInput
                                                                 type="number"
                                                                 step="0.01"
                                                                 value={item.unit_price}
                                                                 onChange={(e) => updateCartItem(item.id, 'unit_price', parseFloat(e.target.value) || 0)}
                                                                 className="w-24"
                                                                 min="0"
                                                                 placeholder="Qiymət"
                                                             />
                                                             
                                                             <span className="text-sm text-gray-500">=</span>
                                                             
                                                             <div className="w-20 text-right font-medium">
                                                                 {item.total.toFixed(2)} AZN
                                                             </div>
                                                             
                                                             <DangerButton
                                                                 type="button"
                                                                 onClick={() => removeFromCart(item.id)}
                                                                 className="p-1"
                                                             >
                                                                 <TrashIcon className="h-4 w-4" />
                                                             </DangerButton>
                                                         </div>
                                                     </div>
                                                     {/* Notes field for each item */}
                                                     <div className="mt-2 px-3">
                                                         <TextInput
                                                             type="text"
                                                             value={item.notes || ''}
                                                             onChange={(e) => updateCartItem(item.id, 'notes', e.target.value)}
                                                             className="w-full text-sm"
                                                             placeholder="Qeydlər (ixtiyari)"
                                                         />
                                                     </div>
                                                ))}
                                            </div>
                                        )}
                                    </div>
                                </div>
                            </div>

                            {/* Right Column - Summary & Actions */}
                            <div className="lg:col-span-1">
                                {/* Summary */}
                                <div className="bg-white shadow-sm sm:rounded-lg mb-6 sticky top-6">
                                    <div className="p-6">
                                        <h3 className="text-lg font-medium text-gray-900 mb-4">Xülasə</h3>
                                        
                                        <div className="space-y-2 text-sm">
                                            <div className="flex justify-between">
                                                <span>Ara Cəm:</span>
                                                <span>{subtotal.toFixed(2)} AZN</span>
                                            </div>
                                            
                                            {mode === 'service' && (
                                                <div className="flex justify-between">
                                                    <span>İşçilik:</span>
                                                    <span>{laborCost.toFixed(2)} AZN</span>
                                                </div>
                                            )}
                                            
                                            {mode === 'sale' && (
                                                <div className="flex justify-between">
                                                    <span>Vergi:</span>
                                                    <TextInput
                                                        type="number"
                                                        step="0.01"
                                                        value={formData.tax_amount}
                                                        onChange={(e) => setFormData(prev => ({ ...prev, tax_amount: parseFloat(e.target.value) || 0 }))}
                                                        className="w-20 text-right text-sm"
                                                        min="0"
                                                    />
                                                </div>
                                            )}
                                            
                                            <div className="flex justify-between">
                                                <span>Endirim:</span>
                                                <TextInput
                                                    type="number"
                                                    step="0.01"
                                                    value={formData.discount_amount}
                                                    onChange={(e) => setFormData(prev => ({ ...prev, discount_amount: parseFloat(e.target.value) || 0 }))}
                                                    className="w-20 text-right text-sm"
                                                    min="0"
                                                />
                                            </div>
                                            
                                            <hr className="my-2" />
                                            
                                            <div className="flex justify-between font-bold text-lg">
                                                <span>Cəm:</span>
                                                <span>{grandTotal.toFixed(2)} AZN</span>
                                            </div>
                                        </div>

                                        {/* Payment Section */}
                                        <div className="mt-6">
                                            {/* Unified Payment Form */}
                                            <h4 className="text-md font-medium text-gray-900 mb-4">Ödəmə</h4>
                                            
                                            <div className="space-y-4">
                                                {/* Payment Status */}
                                                <div>
                                                    <InputLabel htmlFor="payment_status" value="Ödəmə Statusu" />
                                                    <select
                                                        id="payment_status"
                                                        value={formData.payment_status}
                                                        onChange={(e) => setFormData(prev => ({ 
                                                            ...prev, 
                                                            payment_status: e.target.value as 'paid' | 'credit' | 'partial'
                                                        }))}
                                                        className="mt-1 block w-full border-gray-300 rounded-md shadow-sm"
                                                        disabled={processing}
                                                    >
                                                        <option value="paid">Tam Ödənildi</option>
                                                        <option value="partial">Qismən Ödənildi</option>
                                                        <option value="credit">Borc</option>
                                                    </select>
                                                    <InputError message={errors.payment_status} className="mt-2" />
                                                </div>

                                                {/* Paid Amount */}
                                                {(formData.payment_status === 'paid' || formData.payment_status === 'partial') && (
                                                    <div>
                                                        <InputLabel htmlFor="paid_amount" value="Ödənilən Məbləğ (AZN)" />
                                                        <TextInput
                                                            id="paid_amount"
                                                            type="number"
                                                            step="0.01"
                                                            value={formData.paid_amount}
                                                            onChange={(e) => {
                                                                const paidAmount = parseFloat(e.target.value) || 0;
                                                                setFormData(prev => ({ 
                                                                    ...prev, 
                                                                    paid_amount: paidAmount,
                                                                    credit_amount: Math.max(0, grandTotal - paidAmount)
                                                                }));
                                                            }}
                                                            className="mt-1 block w-full"
                                                            min="0"
                                                            max={grandTotal}
                                                            disabled={processing || formData.payment_status === 'paid'}
                                                            readOnly={formData.payment_status === 'paid'}
                                                        />
                                                        <InputError message={errors.paid_amount} className="mt-2" />
                                                        {formData.payment_status === 'paid' && (
                                                            <p className="text-xs text-gray-500 mt-1">Tam ödəmə - məbləğ avtomatik hesablanır</p>
                                                        )}
                                                    </div>
                                                )}

                                                {/* Credit Amount */}
                                                {(formData.payment_status === 'credit' || formData.payment_status === 'partial') && (
                                                    <div>
                                                        <InputLabel htmlFor="credit_amount" value="Borc Məbləği (AZN)" />
                                                        <TextInput
                                                            id="credit_amount"
                                                            type="number"
                                                            step="0.01"
                                                            value={formData.credit_amount}
                                                            onChange={(e) => {
                                                                if (formData.payment_status === 'partial') {
                                                                    const creditAmount = parseFloat(e.target.value) || 0;
                                                                    setFormData(prev => ({ 
                                                                        ...prev, 
                                                                        credit_amount: creditAmount,
                                                                        paid_amount: Math.max(0, grandTotal - creditAmount)
                                                                    }));
                                                                }
                                                            }}
                                                            className="mt-1 block w-full"
                                                            min="0"
                                                            max={grandTotal}
                                                            disabled={processing}
                                                            readOnly={formData.payment_status === 'credit'}
                                                        />
                                                        <InputError message={errors.credit_amount} className="mt-2" />
                                                        {formData.payment_status === 'credit' && (
                                                            <p className="text-xs text-gray-500 mt-1">Tam borc - məbləğ avtomatik hesablanır</p>
                                                        )}
                                                        {formData.payment_status === 'partial' && (
                                                            <p className="text-xs text-gray-500 mt-1">Qalan borc məbləği avtomatik hesablanır</p>
                                                        )}
                                                    </div>
                                                )}

                                                {/* Credit Due Date */}
                                                {(formData.payment_status === 'credit' || formData.payment_status === 'partial') && formData.credit_amount > 0 && (
                                                    <div>
                                                        <InputLabel htmlFor="credit_due_date" value="Borc Ödəmə Tarixi" />
                                                        <TextInput
                                                            id="credit_due_date"
                                                            type="date"
                                                            value={formData.credit_due_date}
                                                            onChange={(e) => setFormData(prev => ({ ...prev, credit_due_date: e.target.value }))}
                                                            className="mt-1 block w-full"
                                                            disabled={processing}
                                                        />
                                                        <InputError message={errors.credit_due_date} className="mt-2" />
                                                    </div>
                                                )}
                                            </div>
                                        </div>

                                        {/* Notes */}
                                        <div className="mt-4">
                                            <InputLabel htmlFor="notes" value="Qeydlər" />
                                            <textarea
                                                id="notes"
                                                value={formData.notes}
                                                onChange={(e) => setFormData(prev => ({ ...prev, notes: e.target.value }))}
                                                className="mt-1 block w-full text-sm border-gray-300 rounded-md"
                                                rows={2}
                                                placeholder="Əlavə qeydlər"
                                            />
                                        </div>

                                        {/* Submit Button */}
                                        <div className="mt-6">
                                            <PrimaryButton
                                                type="submit"
                                                disabled={processing || cart.length === 0}
                                                className="w-full"
                                            >
                                                {processing ? 'Emal edilir...' : (mode === 'sale' ? 'Satışı Tamamla' : 'Servisi Tamamla')}
                                            </PrimaryButton>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>

        </AuthenticatedLayout>
    );
}